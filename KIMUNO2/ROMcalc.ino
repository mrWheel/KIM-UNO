/*
*
*    
*   Coding style
*       - One True Brace Style formatting/indenting.
*       - Linux brackets, add brackets to all conditionals.
*/
#include "Config.h"

    //void processCalcKey(uint8_t curkey) {};
    //uint8_t enterflt(uint8_t reg) {};
    //uint8_t showflt(uint8_t reg) {};
    //uint8_t enteroperation(void) {};

#if _INCL_CALCULATOR == TRUE

    #define WREG_OFFSET 0x0360

    #include <stdint.h>
    #if _TARGET == PERSONAL_COMPUTER
        unsigned char calcROM[8164] = {
    #else
        const unsigned char calcROM[8164] PROGMEM = {
    #endif

//  0xA2, 0xFF, 0x9A, 0xD8, 0x0A, 0x0A, 0x18, 0x69, 0x11, 0xAA, 0xA9, 0x50,
    0xA2, 0xFF, 0xEA, 0xD8, 0x0A, 0x0A, 0x18, 0x69, 0x11, 0xAA, 0xA9, 0x50,
//  0x69, 0x00, 0x48, 0x8A, 0x48, 0x60, 0x20, 0xB6, 0x50, 0x00, 0x20, 0xAE,
    0x69, 0x00, 0x48, 0x8A, 0x48, 0x60, 0x20, 0xB6, 0x50, 0x60, 0x20, 0xAE,
//  0x50, 0x00, 0x20, 0x78, 0x53, 0x00, 0x20, 0x35, 0x55, 0x00, 0x20, 0xE6,
    0x50, 0x60, 0x20, 0x78, 0x53, 0x60, 0x20, 0x35, 0x55, 0x60, 0x20, 0xE6,
//  0x56, 0x00, 0x20, 0x3E, 0x66, 0x00, 0x20, 0xE2, 0x66, 0x00, 0x20, 0x2B,
    0x56, 0x60, 0x20, 0x3E, 0x66, 0x60, 0x20, 0xE2, 0x66, 0x60, 0x20, 0x2B,
//  0x67, 0x00, 0x20, 0x54, 0x66, 0x00, 0x20, 0x66, 0x66, 0x00, 0x20, 0x0A,
    0x67, 0x60, 0x20, 0x54, 0x66, 0x60, 0x20, 0x66, 0x66, 0x60, 0x20, 0x0A,
//  0x59, 0x00, 0x20, 0x33, 0x59, 0x00, 0x20, 0x4C, 0x59, 0x00, 0x20, 0x91,
    0x59, 0x60, 0x20, 0x33, 0x59, 0x60, 0x20, 0x4C, 0x59, 0x60, 0x20, 0x91,
//  0x59, 0x00, 0x20, 0xB5, 0x58, 0x00, 0x20, 0x8C, 0x59, 0x00, 0x20, 0x96,
    0x59, 0x60, 0x20, 0xB5, 0x58, 0x60, 0x20, 0x8C, 0x59, 0x60, 0x20, 0x96,
//  0x5B, 0x00, 0x20, 0x7D, 0x5B, 0x00, 0x20, 0x2F, 0x5C, 0x00, 0x20, 0x4E,
    0x5B, 0x60, 0x20, 0x7D, 0x5B, 0x60, 0x20, 0x2F, 0x5C, 0x60, 0x20, 0x4E,
//  0x5E, 0x00, 0x20, 0x66, 0x5E, 0x00, 0x20, 0x7E, 0x5E, 0x00, 0x20, 0x96,
    0x5E, 0x60, 0x20, 0x66, 0x5E, 0x60, 0x20, 0x7E, 0x5E, 0x60, 0x20, 0x96,
//  0x5E, 0x00, 0x20, 0x35, 0x61, 0x00, 0x20, 0x13, 0x63, 0x00, 0x20, 0x54,
    0x5E, 0x60, 0x20, 0x35, 0x61, 0x60, 0x20, 0x13, 0x63, 0x60, 0x20, 0x54,
//  0x63, 0x00, 0x20, 0x8D, 0x63, 0x00, 0x20, 0x0D, 0x64, 0x00, 0x20, 0x25,
    0x63, 0x60, 0x20, 0x8D, 0x63, 0x60, 0x20, 0x0D, 0x64, 0x60, 0x20, 0x25,
//  0x64, 0x00, 0x20, 0x3D, 0x64, 0x00, 0x20, 0x55, 0x64, 0x00, 0x20, 0xAE,
    0x64, 0x60, 0x20, 0x3D, 0x64, 0x60, 0x20, 0x55, 0x64, 0x60, 0x20, 0xAE,
//  0x64, 0x00, 0x20, 0x07, 0x65, 0x00, 0x20, 0x74, 0x65, 0x00, 0x20, 0x95,
    0x64, 0x60, 0x20, 0x07, 0x65, 0x60, 0x20, 0x74, 0x65, 0x60, 0x20, 0x95,
//  0x65, 0x00, 0x20, 0xB6, 0x65, 0x00, 0x20, 0xD7, 0x65, 0x00, 0x20, 0xEF,
    0x65, 0x60, 0x20, 0xB6, 0x65, 0x60, 0x20, 0xD7, 0x65, 0x60, 0x20, 0xEF,
//  0x65, 0x00, 0x20, 0x07, 0x66, 0x00, 0xAD, 0x68, 0x03, 0x49, 0x80, 0x8D,
    0x65, 0x60, 0x20, 0x07, 0x66, 0x60, 0xAD, 0x68, 0x03, 0x49, 0x80, 0x8D,

    0x68, 0x03, 0xF8, 0xAD, 0x62, 0x03, 0xD0, 0x09, 0xA9, 0x68, 0xA0, 0x03,
    0xA2, 0x70, 0x4C, 0x30, 0x52, 0xAD, 0x6A, 0x03, 0xD0, 0x09, 0xA9, 0x60,
    0xA0, 0x03, 0xA2, 0x70, 0x4C, 0x30, 0x52, 0xAD, 0x60, 0x03, 0x4D, 0x68,
    0x03, 0x10, 0x6C, 0x2C, 0x60, 0x03, 0x70, 0x07, 0x2C, 0x68, 0x03, 0x70,
    0x0A, 0x50, 0x42, 0x2C, 0x68, 0x03, 0x70, 0x4E, 0x20, 0x38, 0x53, 0x20,
    0xA3, 0x51, 0xA5, 0xC0, 0xF0, 0x09, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x70,
    0x4C, 0x30, 0x52, 0xA5, 0xC1, 0xC9, 0x12, 0xB0, 0xF1, 0xA9, 0x00, 0x85,
    0xC2, 0x20, 0xF0, 0x51, 0x20, 0x5E, 0x52, 0xB0, 0x0D, 0x20, 0x38, 0x53,
    0xA9, 0x00, 0x85, 0xC2, 0x20, 0xF0, 0x51, 0x20, 0x5E, 0x52, 0xAD, 0x60,
    0x03, 0x49, 0x40, 0x85, 0xC0, 0x20, 0xAC, 0x52, 0x60, 0x20, 0xC2, 0x51,
    0xB0, 0x03, 0x20, 0x38, 0x53, 0xA5, 0xC0, 0xC9, 0x00, 0xD0, 0xBF, 0x4C,
    0xFF, 0x50, 0x20, 0xC2, 0x51, 0x90, 0xF2, 0x20, 0x38, 0x53, 0xA5, 0xC0,
    0x4C, 0x31, 0x51, 0x2C, 0x60, 0x03, 0x70, 0x07, 0x2C, 0x68, 0x03, 0x70,
    0x0A, 0x50, 0x34, 0x2C, 0x68, 0x03, 0x70, 0x40, 0x20, 0x38, 0x53, 0x20,
    0xA3, 0x51, 0xA5, 0xC0, 0xF0, 0x09, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x70,
    0x4C, 0x30, 0x52, 0xA5, 0xC1, 0xC9, 0x12, 0xB0, 0xF1, 0xA9, 0x00, 0x85,
    0xC2, 0x20, 0xF0, 0x51, 0x20, 0x44, 0x52, 0x20, 0x8C, 0x52, 0xAD, 0x60,
    0x03, 0x85, 0xC0, 0x20, 0xAC, 0x52, 0x60, 0x20, 0xC2, 0x51, 0xB0, 0x03,
    0x20, 0x38, 0x53, 0xA5, 0xC0, 0xC9, 0x00, 0xD0, 0xCD, 0x4C, 0x6B, 0x51,
    0x20, 0xC2, 0x51, 0x90, 0xF2, 0x20, 0x38, 0x53, 0x4C, 0x8F, 0x51, 0xAD,
    0x60, 0x03, 0x29, 0x0F, 0x85, 0xC0, 0xAD, 0x68, 0x03, 0x29, 0x0F, 0x85,
    0xC1, 0x18, 0xAD, 0x61, 0x03, 0x6D, 0x69, 0x03, 0xAA, 0xA5, 0xC0, 0x65,
    0xC1, 0x85, 0xC0, 0x86, 0xC1, 0x60, 0xAD, 0x60, 0x03, 0x29, 0x0F, 0x85,
    0xC0, 0xAD, 0x68, 0x03, 0x29, 0x0F, 0x85, 0xC1, 0x38, 0xAD, 0x61, 0x03,
    0xED, 0x69, 0x03, 0xAA, 0xA5, 0xC0, 0xE5, 0xC1, 0xB0, 0x0D, 0x38, 0xAD,
    0x69, 0x03, 0xED, 0x61, 0x03, 0xAA, 0xA5, 0xC1, 0xE5, 0xC0, 0x18, 0x85,
    0xC0, 0x86, 0xC1, 0x60, 0xA0, 0x1F, 0xA9, 0x00, 0x99, 0x00, 0x03, 0x88,
    0x10, 0xFA, 0x18, 0xA5, 0xC1, 0x69, 0x11, 0xA8, 0xB9, 0x94, 0x6A, 0x4A,
    0xAA, 0xA0, 0x05, 0xB9, 0x62, 0x03, 0x99, 0x02, 0x03, 0xB9, 0x6A, 0x03,
    0x9D, 0x12, 0x03, 0xCA, 0x88, 0x10, 0xF0, 0xA5, 0xC1, 0x4A, 0x90, 0x13,
    0xA2, 0x0D, 0xA9, 0x00, 0xBC, 0x12, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x12,
    0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x60, 0x84, 0xF3, 0x85, 0xF2,
    0x86, 0xF4, 0xA9, 0x03, 0x85, 0xF5, 0xA0, 0x07, 0xB1, 0xF2, 0x91, 0xF4,
    0x88, 0x10, 0xF9, 0x60, 0xA2, 0x06, 0x18, 0xBD, 0x01, 0x03, 0x7D, 0x11,
    0x03, 0x9D, 0x11, 0x03, 0xCA, 0x10, 0xF4, 0xAD, 0x11, 0x03, 0xF0, 0x05,
    0x20, 0x5F, 0x53, 0xE6, 0xC2, 0x60, 0xA2, 0x08, 0x38, 0xBD, 0x01, 0x03,
    0xFD, 0x11, 0x03, 0x9D, 0x11, 0x03, 0xCA, 0x10, 0xF4, 0x90, 0x1C, 0xA9,
    0x0C, 0x85, 0xC0, 0xAD, 0x12, 0x03, 0x29, 0xF0, 0xD0, 0x09, 0x20, 0x4B,
    0x53, 0xE6, 0xC2, 0xC6, 0xC0, 0xD0, 0xF0, 0xA4, 0xC2, 0xB9, 0x34, 0x6B,
    0x85, 0xC2, 0x38, 0x60, 0xA2, 0x07, 0xA9, 0x50, 0x18, 0x7D, 0x11, 0x03,
    0x9D, 0x11, 0x03, 0xA9, 0x00, 0xCA, 0x10, 0xF5, 0xAD, 0x11, 0x03, 0xF0,
    0x0A, 0x20, 0x5F, 0x53, 0x18, 0xA5, 0xC2, 0x69, 0x01, 0x85, 0xC2, 0x60,
    0xA2, 0x05, 0x18, 0xBD, 0x12, 0x03, 0x9D, 0x72, 0x03, 0xCA, 0x10, 0xF7,
    0xAD, 0x72, 0x03, 0xD0, 0x07, 0x8D, 0x71, 0x03, 0x8D, 0x70, 0x03, 0x60,
    0xAD, 0x61, 0x03, 0x8D, 0x71, 0x03, 0xAD, 0x60, 0x03, 0x29, 0x0F, 0x8D,
    0x70, 0x03, 0x24, 0xC0, 0x50, 0x2F, 0x38, 0xAD, 0x71, 0x03, 0xE5, 0xC2,
    0xAA, 0xAD, 0x70, 0x03, 0xE9, 0x00, 0xB0, 0x2D, 0x38, 0xA5, 0xC2, 0xED,
    0x71, 0x03, 0x8D, 0x71, 0x03, 0xA9, 0x00, 0xED, 0x70, 0x03, 0x8D, 0x70,
    0x03, 0xAD, 0x60, 0x03, 0x29, 0xC0, 0x49, 0x40, 0x0D, 0x70, 0x03, 0x29,
    0xCF, 0x8D, 0x70, 0x03, 0x60, 0x18, 0xAD, 0x61, 0x03, 0x65, 0xC2, 0xAA,
    0xAD, 0x60, 0x03, 0x69, 0x00, 0x8D, 0x70, 0x03, 0x8E, 0x71, 0x03, 0x0D,
    0x71, 0x03, 0xD0, 0x0E, 0xAD, 0x60, 0x03, 0x29, 0x80, 0x0D, 0x70, 0x03,
    0x29, 0xCF, 0x8D, 0x70, 0x03, 0x60, 0xAD, 0x60, 0x03, 0x29, 0xC0, 0x0D,
    0x70, 0x03, 0x29, 0xCF, 0x8D, 0x70, 0x03, 0x60, 0xA0, 0x07, 0xBE, 0x60,
    0x03, 0xB9, 0x68, 0x03, 0x99, 0x60, 0x03, 0x8A, 0x99, 0x68, 0x03, 0x88,
    0x10, 0xF0, 0x60, 0xA2, 0x07, 0xA9, 0x00, 0xBC, 0x11, 0x03, 0x19, 0x54,
    0x69, 0x9D, 0x11, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x60, 0xA2,
    0x07, 0xA9, 0x00, 0xBC, 0x11, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x12, 0x03,
    0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0xA9, 0x00, 0x8D, 0x11, 0x03, 0x60,
    0xF8, 0xA2, 0x2F, 0xA9, 0x00, 0x9D, 0x00, 0x03, 0xCA, 0x10, 0xFA, 0x20,
    0xE2, 0x53, 0xAD, 0x60, 0x03, 0x4D, 0x68, 0x03, 0x29, 0x40, 0xF0, 0x0F,
    0x20, 0xC2, 0x51, 0xB0, 0x05, 0xAD, 0x68, 0x03, 0x90, 0x0B, 0xAD, 0x60,
    0x03, 0xB0, 0x06, 0x20, 0xA3, 0x51, 0xAD, 0x60, 0x03, 0x29, 0x40, 0x8D,
    0x70, 0x03, 0xA5, 0xC2, 0xF0, 0x11, 0xAD, 0x70, 0x03, 0xD0, 0x06, 0x20,
    0x19, 0x55, 0x4C, 0xBF, 0x53, 0x20, 0x27, 0x55, 0x4C, 0xBF, 0x53, 0xA5,
    0xC1, 0x8D, 0x71, 0x03, 0x05, 0xC0, 0xD0, 0x03, 0x8D, 0x70, 0x03, 0xA5,
    0xC0, 0x0D, 0x70, 0x03, 0x8D, 0x70, 0x03, 0xAD, 0x60, 0x03, 0x4D, 0x68,
    0x03, 0x29, 0x80, 0x0D, 0x70, 0x03, 0x8D, 0x70, 0x03, 0x60, 0xAD, 0x62,
    0x03, 0xF0, 0x18, 0xAD, 0x6A, 0x03, 0xF0, 0x13, 0x20, 0x4C, 0x54, 0x20,
    0x0A, 0x54, 0x20, 0x5E, 0x54, 0x20, 0xD5, 0x54, 0x20, 0x9B, 0x54, 0x20,
    0xE9, 0x54, 0x60, 0xA2, 0x07, 0xA9, 0x00, 0x9D, 0x70, 0x03, 0xCA, 0x10,
    0xF8, 0x60, 0xA9, 0x00, 0x85, 0xF0, 0xA9, 0x01, 0x85, 0xF1, 0x85, 0xF3,
    0x85, 0xF5, 0xA9, 0x10, 0x85, 0xF2, 0xA9, 0x20, 0x85, 0xF4, 0xA2, 0x07,
    0xBD, 0x09, 0x03, 0x9D, 0x10, 0x01, 0xCA, 0x10, 0xF7, 0xA2, 0x08, 0xA0,
    0x07, 0x18, 0xB1, 0xF2, 0x79, 0x10, 0x01, 0x91, 0xF4, 0x88, 0x10, 0xF6,
    0xD8, 0x18, 0xA5, 0xF2, 0x69, 0x10, 0x85, 0xF2, 0x18, 0xA5, 0xF4, 0x69,
    0x10, 0x85, 0xF4, 0xF8, 0xCA, 0xD0, 0xE0, 0x60, 0xA2, 0x05, 0xBD, 0x62,
    0x03, 0x9D, 0x0A, 0x03, 0xBD, 0x6A, 0x03, 0x9D, 0x1A, 0x03, 0xCA, 0x10,
    0xF1, 0x60, 0xA9, 0x03, 0x85, 0xF3, 0x85, 0xF5, 0xA9, 0x18, 0x85, 0xF2,
    0xA9, 0x28, 0x85, 0xF4, 0xA0, 0x07, 0xB1, 0xF2, 0x29, 0xF0, 0xF0, 0x09,
    0x85, 0xF0, 0xB1, 0xF0, 0x91, 0xF4, 0x88, 0x10, 0xF9, 0xA2, 0x06, 0xC6,
    0xF2, 0xC6, 0xF4, 0xA0, 0x07, 0xB1, 0xF2, 0x29, 0xF0, 0xF0, 0x0C, 0x85,
    0xF0, 0x18, 0xB1, 0xF0, 0x71, 0xF4, 0x91, 0xF4, 0x88, 0x10, 0xF7, 0xCA,
    0x10, 0xE5, 0x60, 0xA9, 0x19, 0x85, 0xF2, 0xA9, 0x29, 0x85, 0xF4, 0xA2,
    0x06, 0xC6, 0xF2, 0xC6, 0xF4, 0xA0, 0x07, 0xB1, 0xF2, 0x29, 0x0F, 0xF0,
    0x20, 0x0A, 0x0A, 0x0A, 0x0A, 0x85, 0xF0, 0x18, 0xB1, 0xF0, 0x71, 0xF4,
    0x91, 0xF4, 0x88, 0x10, 0xF7, 0x90, 0x0E, 0xA4, 0xF4, 0x88, 0xB9, 0x00,
    0x03, 0x69, 0x00, 0x99, 0x00, 0x03, 0x88, 0xB0, 0xF5, 0xCA, 0x10, 0xD1,
    0x60, 0xA2, 0x0F, 0xA9, 0x00, 0xBC, 0x20, 0x03, 0x19, 0x54, 0x69, 0x9D,
    0x20, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x60, 0xA9, 0x01, 0x85,
    0xC2, 0xAD, 0x23, 0x03, 0x29, 0xF0, 0xD0, 0x05, 0x20, 0x05, 0x55, 0xC6,
    0xC2, 0xA2, 0x05, 0xBD, 0x23, 0x03, 0x9D, 0x72, 0x03, 0xCA, 0x10, 0xF7,
    0x60, 0xA2, 0x06, 0xA9, 0x00, 0xBC, 0x22, 0x03, 0x19, 0x54, 0x69, 0x9D,
    0x22, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x60, 0x18, 0xA5, 0xC1,
    0x69, 0x01, 0x85, 0xC1, 0xA5, 0xC0, 0x69, 0x00, 0x85, 0xC0, 0x60, 0x38,
    0xA5, 0xC1, 0xE9, 0x01, 0x85, 0xC1, 0xA5, 0xC0, 0xE9, 0x00, 0x85, 0xC0,
    0x60, 0xF8, 0xAD, 0x6A, 0x03, 0xD0, 0x03, 0x4C, 0x47, 0x69, 0xAD, 0x62,
    0x03, 0xD0, 0x0B, 0xA9, 0x00, 0xA0, 0x07, 0x99, 0x70, 0x03, 0x88, 0x10,
    0xFA, 0x60, 0xA9, 0x00, 0xA2, 0x2F, 0x9D, 0x00, 0x03, 0xCA, 0x10, 0xFA,
    0xA2, 0x05, 0xBD, 0x6A, 0x03, 0x9D, 0x0A, 0x03, 0xBD, 0x62, 0x03, 0x9D,
    0x12, 0x03, 0xCA, 0x10, 0xF1, 0x20, 0x0A, 0x54, 0x20, 0xD2, 0x56, 0xA9,
    0x0F, 0x85, 0xC4, 0x20, 0x13, 0x56, 0xC6, 0xC4, 0xD0, 0xF9, 0xA9, 0x01,
    0x85, 0xC2, 0xAD, 0x18, 0x03, 0xF0, 0x12, 0x20, 0xD2, 0x56, 0xC6, 0xC2,
    0xA2, 0x05, 0xBD, 0x18, 0x03, 0x9D, 0x72, 0x03, 0xCA, 0x10, 0xF7, 0x30,
    0x0B, 0xA2, 0x05, 0xBD, 0x19, 0x03, 0x9D, 0x72, 0x03, 0xCA, 0x10, 0xF7,
    0xAD, 0x60, 0x03, 0x4D, 0x68, 0x03, 0x29, 0x40, 0xF0, 0x09, 0x20, 0xA3,
    0x51, 0xAD, 0x60, 0x03, 0x4C, 0xBD, 0x55, 0x20, 0xC2, 0x51, 0xAD, 0x68,
    0x03, 0xB0, 0x02, 0x49, 0x40, 0x29, 0x40, 0x8D, 0x70, 0x03, 0x2C, 0x70,
    0x03, 0x70, 0x19, 0xA5, 0xC2, 0xF0, 0x22, 0xA5, 0xC1, 0x05, 0xC0, 0xD0,
    0x19, 0xA9, 0x01, 0x85, 0xC1, 0xA9, 0x40, 0x0D, 0x70, 0x03, 0x8D, 0x70,
    0x03, 0x4C, 0xED, 0x55, 0xA5, 0xC2, 0xF0, 0x09, 0x20, 0x19, 0x55, 0x4C,
    0xED, 0x55, 0x20, 0x27, 0x55, 0xA5, 0xC1, 0x8D, 0x71, 0x03, 0xA5, 0xC0,
    0x0D, 0x70, 0x03, 0x8D, 0x70, 0x03, 0x29, 0x0F, 0x0D, 0x71, 0x03, 0xD0,
    0x03, 0x8D, 0x70, 0x03, 0xAD, 0x60, 0x03, 0x4D, 0x68, 0x03, 0x29, 0x80,
    0x0D, 0x70, 0x03, 0x8D, 0x70, 0x03, 0x60, 0xA9, 0x09, 0x85, 0xC3, 0xAD,
    0x10, 0x03, 0xAE, 0x11, 0x03, 0xCD, 0x90, 0x01, 0x90, 0x07, 0xD0, 0x7D,
    0xEC, 0x91, 0x01, 0xB0, 0x78, 0xC6, 0xC3, 0xCD, 0x80, 0x01, 0x90, 0x07,
    0xD0, 0x6F, 0xEC, 0x81, 0x01, 0xB0, 0x6A, 0xC6, 0xC3, 0xCD, 0x70, 0x01,
    0x90, 0x07, 0xD0, 0x61, 0xEC, 0x71, 0x01, 0xB0, 0x5C, 0xC6, 0xC3, 0xCD,
    0x60, 0x01, 0x90, 0x07, 0xD0, 0x53, 0xEC, 0x61, 0x01, 0xB0, 0x4E, 0xC6,
    0xC3, 0xCD, 0x50, 0x01, 0x90, 0x07, 0xD0, 0x45, 0xEC, 0x51, 0x01, 0xB0,
    0x40, 0xC6, 0xC3, 0xCD, 0x40, 0x01, 0x90, 0x07, 0xD0, 0x37, 0xEC, 0x41,
    0x01, 0xB0, 0x32, 0xC6, 0xC3, 0xCD, 0x30, 0x01, 0x90, 0x07, 0xD0, 0x29,
    0xEC, 0x31, 0x01, 0xB0, 0x24, 0xC6, 0xC3, 0xCD, 0x20, 0x01, 0x90, 0x07,
    0xD0, 0x1B, 0xEC, 0x21, 0x01, 0xB0, 0x16, 0xC6, 0xC3, 0xCD, 0x10, 0x01,
    0x90, 0x07, 0xD0, 0x0D, 0xEC, 0x11, 0x01, 0xB0, 0x08, 0xC6, 0xC3, 0x2D,
    0x1F, 0x03, 0x4C, 0xD2, 0x56, 0xAD, 0x1F, 0x03, 0x29, 0xF0, 0x05, 0xC3,
    0x8D, 0x1F, 0x03, 0x0A, 0x0A, 0x0A, 0x0A, 0x85, 0xF2, 0xA0, 0x07, 0x38,
    0xB9, 0x10, 0x03, 0xF1, 0xF2, 0x99, 0x10, 0x03, 0x88, 0x10, 0xF5, 0xB0,
    0x11, 0xCE, 0x1F, 0x03, 0xA0, 0x07, 0xB9, 0x10, 0x03, 0x79, 0x10, 0x01,
    0x99, 0x10, 0x03, 0x88, 0x10, 0xF4, 0xA2, 0x0F, 0xA9, 0x00, 0xBC, 0x10,
    0x03, 0x19, 0x54, 0x69, 0x9D, 0x10, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10,
    0xF1, 0x60, 0xF8, 0xAD, 0x62, 0x03, 0xD0, 0x0B, 0xA2, 0x07, 0xA9, 0x00,
    0x9D, 0x70, 0x03, 0xCA, 0x10, 0xFA, 0x60, 0x2C, 0x60, 0x03, 0x10, 0x03,
    0x4C, 0x23, 0x69, 0xA2, 0x0F, 0xA9, 0x00, 0x9D, 0x00, 0x03, 0xCA, 0x10,
    0xFA, 0xA2, 0x07, 0xBD, 0x62, 0x03, 0x9D, 0x02, 0x03, 0xCA, 0x10, 0xF7,
    0xAD, 0x61, 0x03, 0x29, 0x01, 0xD0, 0x13, 0xA2, 0x07, 0xA9, 0x00, 0xBC,
    0x00, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x01, 0x03, 0xB9, 0xF4, 0x69, 0xCA,
    0x10, 0xF1, 0xA2, 0x07, 0x18, 0xBD, 0x01, 0x03, 0x7D, 0x01, 0x03, 0x9D,
    0x11, 0x03, 0xCA, 0x10, 0xF4, 0xA2, 0x07, 0x18, 0xBD, 0x11, 0x03, 0x7D,
    0x11, 0x03, 0x9D, 0x11, 0x03, 0xCA, 0x10, 0xF4, 0xA2, 0x07, 0x18, 0xBD,
    0x01, 0x03, 0x7D, 0x11, 0x03, 0x9D, 0x01, 0x03, 0xCA, 0x10, 0xF4, 0xA9,
    0x01, 0x85, 0xF2, 0xA9, 0x00, 0x8D, 0x10, 0x03, 0xA9, 0x06, 0x85, 0xC3,
    0xA6, 0xF2, 0xA9, 0x05, 0x9D, 0x10, 0x03, 0x20, 0xE4, 0x57, 0xC6, 0xC3,
    0x30, 0x06, 0x20, 0x31, 0x58, 0x4C, 0x68, 0x57, 0xA2, 0x07, 0xA9, 0x00,
    0xBC, 0x11, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x11, 0x03, 0xB9, 0xF4, 0x69,
    0xCA, 0x10, 0xF1, 0xA2, 0x05, 0xBD, 0x11, 0x03, 0x9D, 0x72, 0x03, 0xCA,
    0x10, 0xF7, 0xAD, 0x61, 0x03, 0x8D, 0x71, 0x03, 0xAD, 0x60, 0x03, 0x29,
    0x0F, 0x8D, 0x70, 0x03, 0x4E, 0x70, 0x03, 0x6E, 0x71, 0x03, 0xAC, 0x70,
    0x03, 0xB9, 0x98, 0x6B, 0x8D, 0x70, 0x03, 0xAC, 0x71, 0x03, 0xB9, 0x98,
    0x6B, 0x8D, 0x71, 0x03, 0x2C, 0x60, 0x03, 0x50, 0x1E, 0xAD, 0x61, 0x03,
    0x29, 0x01, 0xF0, 0x0F, 0x18, 0x6D, 0x71, 0x03, 0x8D, 0x71, 0x03, 0xAD,
    0x70, 0x03, 0x69, 0x00, 0x8D, 0x70, 0x03, 0xA9, 0x40, 0x0D, 0x70, 0x03,
    0x8D, 0x70, 0x03, 0x60, 0xA6, 0xF2, 0x38, 0xBD, 0x00, 0x03, 0xFD, 0x10,
    0x03, 0x9D, 0x00, 0x03, 0xCA, 0x10, 0xF4, 0x90, 0x0D, 0xA6, 0xF2, 0x18,
    0xBD, 0x10, 0x03, 0x69, 0x10, 0x9D, 0x10, 0x03, 0x90, 0xE2, 0xA6, 0xF2,
    0xBD, 0x10, 0x03, 0x29, 0xF0, 0x09, 0x09, 0x9D, 0x10, 0x03, 0xA9, 0x50,
    0x9D, 0x11, 0x03, 0x20, 0x31, 0x58, 0xE6, 0xF2, 0xA6, 0xF2, 0x18, 0xBD,
    0x00, 0x03, 0x7D, 0x10, 0x03, 0x9D, 0x00, 0x03, 0xCA, 0x10, 0xF4, 0xB0,
    0x07, 0xA6, 0xF2, 0xDE, 0x0F, 0x03, 0x90, 0xE8, 0x60, 0xA2, 0x0F, 0xA9,
    0x00, 0xBC, 0x00, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x00, 0x03, 0xB9, 0xF4,
    0x69, 0xCA, 0x10, 0xF1, 0x60, 0xF8, 0xC6, 0xC6, 0xA2, 0x07, 0xBD, 0x88,
    0x03, 0x9D, 0x60, 0x03, 0x9D, 0x68, 0x03, 0xCA, 0x10, 0xF4, 0x20, 0x78,
    0x53, 0xA2, 0x07, 0xBD, 0x70, 0x03, 0x9D, 0x88, 0x03, 0xCA, 0x10, 0xF7,
    0xA0, 0x07, 0xB1, 0xF8, 0x99, 0x70, 0x03, 0x88, 0x10, 0xF8, 0x20, 0x9D,
    0x58, 0x20, 0xA9, 0x58, 0x20, 0x78, 0x53, 0xD8, 0x18, 0xA5, 0xF8, 0x69,
    0x08, 0x85, 0xF8, 0x90, 0x02, 0xE6, 0xF9, 0xF8, 0x20, 0x92, 0x58, 0x20,
    0xA9, 0x58, 0x20, 0xB6, 0x50, 0xC6, 0xC6, 0xD0, 0xDD, 0x60, 0xA0, 0x07,
    0xB1, 0xF8, 0x99, 0x60, 0x03, 0x88, 0x10, 0xF8, 0x60, 0xA2, 0x07, 0xBD,
    0x88, 0x03, 0x9D, 0x60, 0x03, 0xCA, 0x10, 0xF7, 0x60, 0xA2, 0x07, 0xBD,
    0x70, 0x03, 0x9D, 0x68, 0x03, 0xCA, 0x10, 0xF7, 0x60, 0x20, 0x4C, 0x59,
    0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x78, 0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0,
    0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68,
    0x20, 0x30, 0x52, 0x20, 0x78, 0x53, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68,
    0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52,
    0x20, 0xB6, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52,
    0x20, 0xE6, 0x56, 0xA5, 0xC9, 0xC9, 0x01, 0xF0, 0x0C, 0xC9, 0x04, 0xF0,
    0x08, 0xAD, 0x70, 0x03, 0x09, 0x80, 0x8D, 0x70, 0x03, 0x60, 0x20, 0xB5,
    0x58, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0x78,
    0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0xAD, 0x70,
    0x03, 0x29, 0x7F, 0xA6, 0xC9, 0xE0, 0x03, 0x90, 0x02, 0x09, 0x80, 0x8D,
    0x70, 0x03, 0x60, 0x20, 0xB5, 0x58, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68,
    0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52,
    0x20, 0x35, 0x55, 0x60, 0xA9, 0x00, 0x85, 0xCA, 0xF8, 0xA9, 0x00, 0x85,
    0xC8, 0x20, 0x57, 0x67, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30,
    0x52, 0xAD, 0x72, 0x03, 0xD0, 0x01, 0x60, 0x20, 0xA9, 0x59, 0xAD, 0x70,
    0x03, 0x05, 0xC8, 0x8D, 0x70, 0x03, 0xA5, 0xCA, 0xF0, 0x15, 0xA9, 0xA0,
    0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03, 0xA2,
    0x68, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0x60, 0xA9, 0x01, 0x4C, 0x4E,
    0x59, 0x20, 0x0A, 0x59, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30,
    0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x4C, 0x35,
    0x55, 0xAD, 0x62, 0x03, 0xD0, 0x0B, 0xA9, 0x00, 0xA2, 0x07, 0x9D, 0x70,
    0x03, 0xCA, 0x10, 0xFA, 0x60, 0x2C, 0x60, 0x03, 0x50, 0x1A, 0xAD, 0x60,
    0x03, 0x29, 0x0F, 0xD0, 0x07, 0xAD, 0x61, 0x03, 0xC9, 0x08, 0x90, 0x0C,
    0xA2, 0x07, 0xBD, 0x60, 0x03, 0x9D, 0x70, 0x03, 0xCA, 0x10, 0xF7, 0x60,
    0xA2, 0x2F, 0xA9, 0x00, 0x9D, 0x00, 0x03, 0xCA, 0x10, 0xFA, 0xA9, 0x48,
    0x85, 0xF2, 0xA9, 0x6E, 0x85, 0xF3, 0xAD, 0x61, 0x03, 0x4A, 0xD8, 0x69,
    0x05, 0xF8, 0xAA, 0xA0, 0x05, 0xB9, 0x62, 0x03, 0x9D, 0x02, 0x03, 0xCA,
    0x88, 0x10, 0xF6, 0xAD, 0x61, 0x03, 0x29, 0x01, 0xF0, 0x13, 0xA2, 0x0C,
    0xA9, 0x00, 0xBC, 0x02, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x02, 0x03, 0xB9,
    0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x20, 0x24, 0x5B, 0x20, 0xC2, 0x5A, 0xA9,
    0x00, 0x8D, 0x60, 0x03, 0x8D, 0x61, 0x03, 0xA9, 0x08, 0x85, 0xC7, 0xAD,
    0x02, 0x03, 0x29, 0xF0, 0xD0, 0x2A, 0xA9, 0x40, 0x8D, 0x60, 0x03, 0xEE,
    0x61, 0x03, 0xA9, 0x00, 0xA2, 0x0C, 0xBC, 0x02, 0x03, 0x19, 0x54, 0x69,
    0x9D, 0x02, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0xC6, 0xC7, 0xD0,
    0xDA, 0xA9, 0x00, 0xA2, 0x07, 0x9D, 0x70, 0x03, 0xCA, 0x10, 0xFA, 0x60,
    0xA2, 0x05, 0xBD, 0x02, 0x03, 0x9D, 0x62, 0x03, 0xCA, 0x10, 0xF7, 0xAD,
    0x11, 0x03, 0xF0, 0x0C, 0xA2, 0x07, 0xBD, 0x60, 0x03, 0x9D, 0x70, 0x03,
    0xCA, 0x10, 0xF7, 0x60, 0xA9, 0x08, 0x85, 0xC7, 0xA9, 0x40, 0x8D, 0x68,
    0x03, 0xA9, 0x00, 0x8D, 0x69, 0x03, 0xAD, 0x12, 0x03, 0x29, 0xF0, 0xD0,
    0x26, 0xEE, 0x69, 0x03, 0xA9, 0x00, 0xA2, 0x0A, 0xBC, 0x12, 0x03, 0x19,
    0x54, 0x69, 0x9D, 0x12, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0xC6,
    0xC7, 0xD0, 0xDF, 0xA2, 0x07, 0xBD, 0x80, 0x6D, 0x9D, 0x70, 0x03, 0xCA,
    0x10, 0xF7, 0x60, 0xA2, 0x05, 0xBD, 0x12, 0x03, 0x9D, 0x6A, 0x03, 0xCA,
    0x10, 0xF7, 0x20, 0x35, 0x55, 0x60, 0xA2, 0x10, 0x8E, 0x12, 0x03, 0xA2,
    0x0A, 0xBD, 0x02, 0x03, 0x9D, 0x22, 0x03, 0xBD, 0x12, 0x03, 0x9D, 0x32,
    0x03, 0xCA, 0x10, 0xF1, 0xA9, 0x00, 0x85, 0xC5, 0xA6, 0xC5, 0xDE, 0x40,
    0x03, 0x30, 0x38, 0xF8, 0xA2, 0x0A, 0xBD, 0x02, 0x03, 0x9D, 0x22, 0x03,
    0xBD, 0x12, 0x03, 0x9D, 0x32, 0x03, 0xCA, 0x10, 0xF1, 0xA5, 0xC5, 0x20,
    0x87, 0x66, 0xA2, 0x0A, 0x38, 0xBD, 0x12, 0x03, 0xFD, 0x22, 0x03, 0x9D,
    0x12, 0x03, 0xCA, 0x10, 0xF4, 0xA2, 0x0A, 0x18, 0xBD, 0x02, 0x03, 0x7D,
    0x32, 0x03, 0x9D, 0x02, 0x03, 0xCA, 0x10, 0xF4, 0x4C, 0xDC, 0x5A, 0xE6,
    0xC5, 0xA9, 0x05, 0xC5, 0xC5, 0xB0, 0xB9, 0x60, 0xA9, 0x05, 0x85, 0xC5,
    0xA2, 0x00, 0x8E, 0x40, 0x03, 0xA0, 0x07, 0x38, 0xB9, 0x02, 0x03, 0xF1,
    0xF2, 0x99, 0x02, 0x03, 0x88, 0x10, 0xF5, 0x90, 0x06, 0xFE, 0x40, 0x03,
    0x4C, 0x2D, 0x5B, 0xA0, 0x07, 0x18, 0xB9, 0x02, 0x03, 0x71, 0xF2, 0x99,
    0x02, 0x03, 0x88, 0x10, 0xF5, 0xE8, 0xA9, 0x00, 0x9D, 0x40, 0x03, 0xD8,
    0x18, 0xA5, 0xF2, 0x69, 0x08, 0x85, 0xF2, 0x90, 0x02, 0xE6, 0xF3, 0xF8,
    0xC6, 0xC5, 0x10, 0xC5, 0x60, 0xA2, 0x09, 0xA9, 0x00, 0x9D, 0x30, 0x03,
    0xCA, 0x10, 0xFA, 0xA0, 0x07, 0xB1, 0xF4, 0x91, 0xF6, 0x88, 0x10, 0xF9,
    0x60, 0x20, 0x96, 0x5B, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30,
    0x52, 0xA9, 0x80, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0xAE,
    0x50, 0x60, 0xAD, 0x62, 0x03, 0xD0, 0x03, 0x4C, 0x19, 0x69, 0xAD, 0x60,
    0x03, 0x29, 0x80, 0x85, 0xCC, 0xA9, 0x60, 0x29, 0x7F, 0x8D, 0x60, 0x03,
    0xA9, 0x60, 0x85, 0xF2, 0xA9, 0x03, 0x85, 0xF3, 0xA9, 0x90, 0x85, 0xF4,
    0xA9, 0x03, 0x85, 0xF5, 0x20, 0x04, 0x69, 0xA9, 0x60, 0xA0, 0x03, 0xA2,
    0x68, 0x20, 0x30, 0x52, 0x20, 0x78, 0x53, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2,
    0x60, 0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30,
    0x52, 0x20, 0xAE, 0x50, 0xAD, 0x72, 0x03, 0xF0, 0x08, 0xAD, 0x70, 0x03,
    0x10, 0x0F, 0x4C, 0x2F, 0x69, 0xA9, 0x80, 0xA0, 0x6D, 0xA2, 0x70, 0x20,
    0x30, 0x52, 0x4C, 0x26, 0x5C, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20,
    0x30, 0x52, 0x20, 0xE6, 0x56, 0xA9, 0x90, 0xA0, 0x03, 0xA2, 0x60, 0x20,
    0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20,
    0x35, 0x55, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20,
    0x2F, 0x5C, 0xAD, 0x70, 0x03, 0x05, 0xCC, 0x8D, 0x70, 0x03, 0x60, 0xF8,
    0xA9, 0x00, 0x85, 0xCA, 0x85, 0xC8, 0x2C, 0x60, 0x03, 0x10, 0x0C, 0xA9,
    0x80, 0x85, 0xC8, 0xA9, 0x4F, 0x2D, 0x60, 0x03, 0x8D, 0x60, 0x03, 0x70,
    0x0E, 0x20, 0x3E, 0x66, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30,
    0x52, 0xE6, 0xCA, 0xAD, 0x60, 0x03, 0x29, 0x0F, 0xD0, 0x07, 0xAD, 0x61,
    0x03, 0xC9, 0x07, 0x90, 0x24, 0xA9, 0x00, 0xC5, 0xCA, 0xF0, 0x0C, 0xA9,
    0x80, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0xA5,
    0xC8, 0x0D, 0x60, 0x03, 0x8D, 0x60, 0x03, 0xA9, 0x60, 0xA0, 0x03, 0xA2,
    0x70, 0x20, 0x30, 0x52, 0x60, 0xA2, 0x4F, 0xA9, 0x00, 0x9D, 0x00, 0x03,
    0xCA, 0x10, 0xFA, 0xAD, 0x61, 0x03, 0x4A, 0xD8, 0x18, 0x69, 0x05, 0xF8,
    0xAA, 0xA0, 0x05, 0xB9, 0x62, 0x03, 0x9D, 0x02, 0x03, 0xCA, 0x88, 0x10,
    0xF6, 0xAD, 0x61, 0x03, 0x29, 0x01, 0xF0, 0x16, 0xA2, 0x07, 0xA9, 0x00,
    0xBC, 0x02, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x03, 0x03, 0xB9, 0xF4, 0x69,
    0xCA, 0x10, 0xF1, 0x8D, 0x02, 0x03, 0xA2, 0x00, 0x86, 0xC5, 0xA9, 0x10,
    0x8D, 0x12, 0x03, 0xA9, 0x00, 0x85, 0xC5, 0xA2, 0x06, 0xBD, 0x02, 0x03,
    0x9D, 0x22, 0x03, 0xBD, 0x12, 0x03, 0x9D, 0x32, 0x03, 0xCA, 0x10, 0xF1,
    0xA5, 0xC5, 0xF0, 0x03, 0x20, 0x87, 0x66, 0xF8, 0x38, 0xA2, 0x06, 0xBD,
    0x02, 0x03, 0xFD, 0x32, 0x03, 0x9D, 0x02, 0x03, 0xCA, 0x10, 0xF4, 0x90,
    0x17, 0x18, 0xA2, 0x06, 0xBD, 0x12, 0x03, 0x7D, 0x22, 0x03, 0x9D, 0x12,
    0x03, 0xCA, 0x10, 0xF4, 0xA6, 0xC5, 0xFE, 0x40, 0x03, 0x4C, 0xD3, 0x5C,
    0xA2, 0x06, 0x18, 0xBD, 0x02, 0x03, 0x7D, 0x32, 0x03, 0x9D, 0x02, 0x03,
    0xCA, 0x10, 0xF4, 0xE6, 0xC5, 0xA9, 0x06, 0xC5, 0xC5, 0xB0, 0xA8, 0xA9,
    0x0A, 0x85, 0xC7, 0xA9, 0x00, 0x8D, 0x61, 0x03, 0xA9, 0x40, 0x8D, 0x60,
    0x03, 0xA9, 0x00, 0x8D, 0x61, 0x03, 0xAD, 0x02, 0x03, 0x29, 0xF0, 0xD0,
    0x1A, 0xEE, 0x61, 0x03, 0xA9, 0x00, 0xA2, 0x0A, 0xBC, 0x02, 0x03, 0x19,
    0x54, 0x69, 0x9D, 0x02, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0xC6,
    0xC7, 0xD0, 0xDF, 0xA2, 0x05, 0xBD, 0x02, 0x03, 0x9D, 0x62, 0x03, 0xCA,
    0x10, 0xF7, 0xA2, 0x07, 0xBD, 0x10, 0x03, 0x9D, 0x68, 0x03, 0xCA, 0x10,
    0xF7, 0x20, 0x35, 0x55, 0xA2, 0x0F, 0xA9, 0x00, 0x9D, 0x00, 0x03, 0xCA,
    0x10, 0xFA, 0xAD, 0x70, 0x03, 0x29, 0x0F, 0xD0, 0x35, 0xAD, 0x71, 0x03,
    0xC9, 0x09, 0xB0, 0x2E, 0x4A, 0x18, 0xD8, 0x69, 0x05, 0xAA, 0xA0, 0x05,
    0xB9, 0x72, 0x03, 0x9D, 0x02, 0x03, 0xCA, 0x88, 0x10, 0xF6, 0xA9, 0x61,
    0x29, 0x01, 0xF0, 0x16, 0xA2, 0x07, 0xA9, 0x00, 0xBC, 0x02, 0x03, 0x19,
    0x54, 0x69, 0x9D, 0x03, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x8D,
    0x02, 0x03, 0xA9, 0x48, 0x85, 0xF2, 0xA9, 0x6E, 0x85, 0xF3, 0xA2, 0x00,
    0x86, 0xC5, 0xDE, 0x40, 0x03, 0x30, 0x11, 0xA0, 0x07, 0xF8, 0x18, 0xB9,
    0x02, 0x03, 0x71, 0xF2, 0x99, 0x02, 0x03, 0x88, 0x10, 0xF5, 0x30, 0xEA,
    0xE6, 0xC5, 0xD8, 0x18, 0xA5, 0xF2, 0x69, 0x08, 0x85, 0xF2, 0x90, 0x02,
    0xE6, 0xF3, 0xA6, 0xC5, 0xE0, 0x07, 0x90, 0xD6, 0xA9, 0x00, 0x8D, 0x70,
    0x03, 0x8D, 0x71, 0x03, 0xAD, 0x02, 0x03, 0x29, 0xF0, 0xD0, 0x1E, 0xA9,
    0x40, 0x8D, 0x70, 0x03, 0xA2, 0x0F, 0xA9, 0x00, 0xBC, 0x02, 0x03, 0x19,
    0x54, 0x69, 0x9D, 0x02, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0xEE,
    0x71, 0x03, 0x4C, 0xFC, 0x5D, 0xA2, 0x05, 0xBD, 0x02, 0x03, 0x9D, 0x72,
    0x03, 0xCA, 0x10, 0xF7, 0xA5, 0xCA, 0xF0, 0x15, 0xA9, 0x80, 0xA0, 0x6D,
    0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20,
    0x30, 0x52, 0x20, 0xAE, 0x50, 0xAD, 0x70, 0x03, 0x05, 0xC8, 0x8D, 0x70,
    0x03, 0x60, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9,
    0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0x4C,
    0x96, 0x5B, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9,
    0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0x4C,
    0x7D, 0x5B, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9,
    0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0x4C,
    0x2F, 0x5C, 0xAD, 0x60, 0x03, 0x10, 0x03, 0x4C, 0x23, 0x69, 0xAD, 0x62,
    0x03, 0xD0, 0x03, 0x4C, 0x2F, 0x69, 0xA2, 0x07, 0xBD, 0x60, 0x03, 0x9D,
    0x90, 0x03, 0xCA, 0x10, 0xF7, 0xAD, 0x60, 0x03, 0xD0, 0x3A, 0xAD, 0x61,
    0x03, 0xD0, 0x35, 0xAD, 0x62, 0x03, 0xC9, 0x10, 0xD0, 0x2E, 0xA9, 0xA0,
    0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0xAE, 0x50, 0xAD, 0x72,
    0x03, 0xD0, 0x03, 0x4C, 0x19, 0x69, 0xAD, 0x70, 0x03, 0xC9, 0x40, 0xD0,
    0x0A, 0xAD, 0x71, 0x03, 0xC9, 0x03, 0x90, 0x03, 0x4C, 0xD8, 0x60, 0xA9,
    0x90, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x0E, 0x69, 0xA2,
    0x05, 0xBD, 0x62, 0x03, 0x9D, 0x02, 0x03, 0xCA, 0x10, 0xF7, 0xA9, 0x00,
    0x85, 0xC3, 0xA9, 0x06, 0x85, 0xC5, 0x20, 0x58, 0x60, 0xA5, 0xC3, 0x20,
    0x9C, 0x60, 0x20, 0x64, 0x60, 0xB0, 0x08, 0xA6, 0xC3, 0xFE, 0x30, 0x03,
    0x4C, 0x06, 0x5F, 0x20, 0x76, 0x60, 0xE6, 0xC3, 0xC6, 0xC5, 0xD0, 0xE2,
    0xA2, 0x06, 0x38, 0xA9, 0x00, 0xFD, 0x02, 0x03, 0x9D, 0x02, 0x03, 0xCA,
    0x10, 0xF5, 0xA2, 0x07, 0xA9, 0x00, 0xBC, 0x02, 0x03, 0x19, 0x54, 0x69,
    0x9D, 0x03, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x8D, 0x02, 0x03,
    0xA9, 0x00, 0x85, 0xF2, 0xA9, 0x6F, 0x85, 0xF3, 0xA9, 0x00, 0x85, 0xC3,
    0xA9, 0x06, 0x85, 0xC4, 0xA6, 0xC3, 0xDE, 0x30, 0x03, 0x30, 0x10, 0xA0,
    0x06, 0x18, 0xB9, 0x02, 0x03, 0x71, 0xF2, 0x99, 0x02, 0x03, 0x88, 0x10,
    0xF5, 0x30, 0xE9, 0xD8, 0x18, 0xA5, 0xF2, 0x69, 0x08, 0x85, 0xF2, 0x90,
    0x02, 0xE6, 0xF3, 0xF8, 0xE6, 0xC3, 0xC6, 0xC4, 0xD0, 0xD6, 0xAD, 0x02,
    0x03, 0x29, 0xF0, 0xD0, 0x07, 0x20, 0x88, 0x60, 0xE6, 0xC4, 0xD0, 0xF2,
    0xA2, 0x05, 0xBD, 0x02, 0x03, 0x9D, 0x9A, 0x03, 0xCA, 0x10, 0xF7, 0xA9,
    0x80, 0x8D, 0x98, 0x03, 0xA5, 0xC4, 0x8D, 0x99, 0x03, 0xF0, 0x08, 0xA9,
    0x40, 0x0D, 0x98, 0x03, 0x8D, 0x98, 0x03, 0x20, 0xEB, 0x5F, 0xA9, 0xA0,
    0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0xB6, 0x50, 0xA9, 0x70,
    0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0x38, 0xA0, 0x6D, 0xA2,
    0x68, 0x20, 0x30, 0x52, 0x20, 0x78, 0x53, 0xA2, 0x07, 0xBD, 0x98, 0x03,
    0x9D, 0x60, 0x03, 0xCA, 0x10, 0xF7, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68,
    0x20, 0x30, 0x52, 0x20, 0xB6, 0x50, 0x60, 0xA2, 0x05, 0xA9, 0x00, 0x9D,
    0x62, 0x03, 0xCA, 0x10, 0xFA, 0xAD, 0x60, 0x03, 0x29, 0x7F, 0x8D, 0x60,
    0x03, 0x29, 0x40, 0x0A, 0xAA, 0xAD, 0x60, 0x03, 0x29, 0x0F, 0xD0, 0x29,
    0x8E, 0x60, 0x03, 0xAD, 0x61, 0x03, 0x29, 0xF0, 0xD0, 0x13, 0xAD, 0x61,
    0x03, 0x0A, 0x0A, 0x0A, 0x0A, 0x8D, 0x62, 0x03, 0xA9, 0x00, 0x8D, 0x61,
    0x03, 0x8E, 0x60, 0x03, 0x60, 0x8D, 0x62, 0x03, 0xA9, 0x01, 0x8D, 0x61,
    0x03, 0x8E, 0x60, 0x03, 0x60, 0x0A, 0x0A, 0x0A, 0x0A, 0x8D, 0x62, 0x03,
    0xAD, 0x61, 0x03, 0x4A, 0x4A, 0x4A, 0x4A, 0x0D, 0x62, 0x03, 0x8D, 0x62,
    0x03, 0xAD, 0x61, 0x03, 0x0A, 0x0A, 0x0A, 0x0A, 0x8D, 0x63, 0x03, 0xA9,
    0x02, 0x8D, 0x61, 0x03, 0x8E, 0x60, 0x03, 0x60, 0xA0, 0x06, 0xB9, 0x02,
    0x03, 0x99, 0x22, 0x03, 0x88, 0x10, 0xF7, 0x60, 0xD8, 0x18, 0xA2, 0x07,
    0xF8, 0xBD, 0x02, 0x03, 0x7D, 0x22, 0x03, 0x9D, 0x02, 0x03, 0xCA, 0x10,
    0xF4, 0x60, 0xD8, 0x38, 0xF8, 0xA2, 0x07, 0xBD, 0x02, 0x03, 0xFD, 0x22,
    0x03, 0x9D, 0x02, 0x03, 0xCA, 0x10, 0xF4, 0x60, 0xA2, 0x08, 0xA9, 0x00,
    0xBC, 0x02, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x02, 0x03, 0xB9, 0xF4, 0x69,
    0xCA, 0x10, 0xF1, 0x60, 0x85, 0xC4, 0x29, 0x01, 0xF0, 0x16, 0xA9, 0x00,
    0xA2, 0x07, 0xBC, 0x22, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x23, 0x03, 0xB9,
    0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x8D, 0x22, 0x03, 0xA5, 0xC4, 0x4A, 0xF0,
    0x1A, 0xD8, 0x18, 0x69, 0x07, 0xF8, 0xA8, 0xA2, 0x07, 0xBD, 0x22, 0x03,
    0x99, 0x22, 0x03, 0x88, 0xCA, 0x10, 0xF6, 0xA9, 0x00, 0x99, 0x22, 0x03,
    0x88, 0x10, 0xFA, 0x60, 0xA9, 0x80, 0x85, 0xF6, 0xA9, 0x6F, 0x85, 0xF7,
    0xA9, 0x03, 0x85, 0xC3, 0xA2, 0x07, 0xBD, 0x70, 0x03, 0x9D, 0x98, 0x03,
    0xCA, 0x10, 0xF7, 0xA0, 0x07, 0xB1, 0xF6, 0x99, 0x70, 0x03, 0x88, 0x10,
    0xF8, 0xA0, 0x07, 0xB9, 0x70, 0x03, 0x99, 0x60, 0x03, 0xB9, 0x98, 0x03,
    0x99, 0x68, 0x03, 0x88, 0x10, 0xF1, 0x20, 0x78, 0x53, 0xC6, 0xC3, 0x30,
    0x23, 0xD8, 0x18, 0xA5, 0xF6, 0x69, 0x08, 0x85, 0xF6, 0x90, 0x02, 0xE6,
    0xF7, 0xF8, 0xA0, 0x07, 0xB1, 0xF6, 0x99, 0x60, 0x03, 0xB9, 0x70, 0x03,
    0x99, 0x68, 0x03, 0x88, 0x10, 0xF2, 0x20, 0xB6, 0x50, 0x4C, 0xF9, 0x60,
    0x60, 0xA9, 0x00, 0x85, 0xCD, 0xAD, 0x60, 0x03, 0x29, 0x0F, 0xF0, 0x03,
    0x4C, 0x2F, 0x69, 0xAD, 0x62, 0x03, 0xD0, 0x09, 0xA9, 0xA0, 0xA0, 0x6D,
    0xA2, 0x70, 0x4C, 0x30, 0x52, 0x2C, 0x60, 0x03, 0x10, 0x0A, 0xA9, 0x80,
    0x85, 0xCD, 0x4D, 0x60, 0x03, 0x8D, 0x60, 0x03, 0x2C, 0x60, 0x03, 0x50,
    0x10, 0xAD, 0x60, 0x03, 0x29, 0x0F, 0xD0, 0xDC, 0xAD, 0x61, 0x03, 0xC9,
    0x12, 0xB0, 0xD5, 0x90, 0x12, 0xAD, 0x61, 0x03, 0xC9, 0x04, 0xB0, 0xC4,
    0xC9, 0x03, 0xD0, 0x07, 0xAD, 0x62, 0x03, 0xC9, 0x23, 0xB0, 0xB9, 0xA9,
    0x40, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0x78, 0x53, 0xA9,
    0x70, 0xA0, 0x03, 0xA2, 0x90, 0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03,
    0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0xE2, 0x66, 0xA9, 0x70, 0xA0, 0x03,
    0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x98, 0x20,
    0x30, 0x52, 0x20, 0xAE, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20,
    0x30, 0x52, 0xA9, 0x38, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20,
    0x78, 0x53, 0xA9, 0x00, 0x85, 0xC0, 0x2C, 0x70, 0x03, 0x50, 0x10, 0xAD,
    0x71, 0x03, 0xC9, 0x12, 0x90, 0x03, 0x4C, 0x48, 0x61, 0xAA, 0xBD, 0x94,
    0x6A, 0x85, 0xC0, 0x20, 0x30, 0x62, 0xAC, 0x99, 0x03, 0xA9, 0x00, 0x8D,
    0x99, 0x03, 0xA2, 0x03, 0x0E, 0x9B, 0x03, 0x2E, 0x9A, 0x03, 0x2E, 0x99,
    0x03, 0x2E, 0x98, 0x03, 0xCA, 0x10, 0xF1, 0x88, 0x10, 0xEC, 0xAD, 0x98,
    0x03, 0x8D, 0x70, 0x03, 0xAD, 0x99, 0x03, 0x8D, 0x71, 0x03, 0x24, 0xCD,
    0x10, 0x15, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9,
    0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0x60,
    0x20, 0x0E, 0x69, 0xA2, 0x05, 0xA5, 0xC0, 0x4A, 0xD8, 0x18, 0x69, 0x05,
    0xA8, 0xBD, 0x72, 0x03, 0x99, 0x02, 0x03, 0x9D, 0x12, 0x03, 0x88, 0xCA,
    0x10, 0xF3, 0xA5, 0xC0, 0x8D, 0x40, 0x03, 0x4A, 0x90, 0x16, 0xA2, 0x08,
    0xA9, 0x00, 0xBC, 0x01, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x02, 0x03, 0xB9,
    0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x9D, 0x02, 0x03, 0xA9, 0x00, 0xA0, 0x6F,
    0x85, 0xF2, 0x84, 0xF3, 0xA9, 0x07, 0x85, 0xC1, 0xA9, 0x00, 0x85, 0xC3,
    0xA9, 0x00, 0xAA, 0xF8, 0x38, 0xA0, 0x07, 0xB9, 0x02, 0x03, 0xF1, 0xF2,
    0x99, 0x02, 0x03, 0x99, 0x22, 0x03, 0x88, 0x10, 0xF2, 0xE8, 0xB0, 0xEB,
    0xCA, 0x8A, 0xA6, 0xC3, 0x9D, 0x30, 0x03, 0xE6, 0xC3, 0x18, 0xA0, 0x07,
    0xB9, 0x02, 0x03, 0x71, 0xF2, 0x99, 0x02, 0x03, 0x88, 0x10, 0xF5, 0xD8,
    0x18, 0xA5, 0xF2, 0x69, 0x08, 0x85, 0xF2, 0x90, 0x02, 0xE6, 0xF3, 0xC6,
    0xC1, 0x10, 0xC1, 0xA9, 0x00, 0x85, 0xC3, 0xA9, 0x10, 0x8D, 0x02, 0x03,
    0xA2, 0x07, 0x86, 0xC5, 0xA2, 0x07, 0xBD, 0x02, 0x03, 0x9D, 0x22, 0x03,
    0xCA, 0x10, 0xF7, 0xA6, 0xC3, 0xDE, 0x30, 0x03, 0x30, 0x23, 0xA2, 0x07,
    0xBD, 0x00, 0x03, 0x9D, 0x20, 0x03, 0xCA, 0x10, 0xF7, 0xA5, 0xC3, 0x20,
    0x9C, 0x60, 0xF8, 0xA2, 0x05, 0x18, 0xBD, 0x02, 0x03, 0x7D, 0x22, 0x03,
    0x9D, 0x02, 0x03, 0xCA, 0x10, 0xF4, 0x4C, 0xCF, 0x62, 0xE6, 0xC3, 0xC6,
    0xC5, 0x10, 0xD0, 0xA2, 0x05, 0xBD, 0x02, 0x03, 0x9D, 0x72, 0x03, 0xCA,
    0x10, 0xF7, 0xA9, 0x00, 0x8D, 0x70, 0x03, 0x8D, 0x71, 0x03, 0x60, 0x20,
    0x35, 0x61, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9,
    0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0xA9,
    0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xAD, 0x60, 0x03, 0x09,
    0x80, 0x8D, 0x60, 0x03, 0x20, 0xB6, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2,
    0x60, 0x20, 0x30, 0x52, 0xA9, 0xA8, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30,
    0x52, 0x4C, 0x78, 0x53, 0x20, 0x35, 0x61, 0xA9, 0x70, 0xA0, 0x03, 0xA2,
    0x68, 0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30,
    0x52, 0x20, 0x35, 0x55, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30,
    0x52, 0x20, 0xB6, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30,
    0x52, 0xA9, 0xA8, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x4C, 0x78,
    0x53, 0x20, 0x35, 0x61, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30,
    0x52, 0xA2, 0x07, 0xBD, 0x70, 0x03, 0x9D, 0x98, 0x03, 0xCA, 0x10, 0xF7,
    0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55,
    0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA2, 0x07, 0xBD,
    0x70, 0x03, 0x9D, 0xA0, 0x03, 0xCA, 0x10, 0xF7, 0xA9, 0x98, 0xA0, 0x03,
    0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0xAE, 0x50, 0xA2, 0x07, 0xBD, 0x98,
    0x03, 0x9D, 0x60, 0x03, 0xCA, 0x10, 0xF7, 0xA2, 0x07, 0xBD, 0xA0, 0x03,
    0x9D, 0x68, 0x03, 0xCA, 0x10, 0xF7, 0xA2, 0x07, 0xBD, 0x70, 0x03, 0x9D,
    0x98, 0x03, 0xCA, 0x10, 0xF7, 0x20, 0xB6, 0x50, 0xA2, 0x07, 0xBD, 0x70,
    0x03, 0x9D, 0x68, 0x03, 0xCA, 0x10, 0xF7, 0xA2, 0x07, 0xBD, 0x98, 0x03,
    0x9D, 0x60, 0x03, 0xCA, 0x10, 0xF7, 0x4C, 0x35, 0x55, 0x20, 0x13, 0x63,
    0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0,
    0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x4C, 0x35, 0x55, 0x20, 0x54, 0x63,
    0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0,
    0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x4C, 0x35, 0x55, 0x20, 0x8D, 0x63,
    0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0,
    0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x4C, 0x35, 0x55, 0xA2, 0x07, 0xBD,
    0x60, 0x03, 0x9D, 0x90, 0x03, 0xCA, 0x10, 0xF7, 0xA9, 0x60, 0xA0, 0x03,
    0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0x78, 0x53, 0xA9, 0x70, 0xA0, 0x03,
    0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20,
    0x30, 0x52, 0x20, 0xB6, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20,
    0x30, 0x52, 0x20, 0xE6, 0x56, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20,
    0x30, 0x52, 0xA9, 0x90, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20,
    0xB6, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x4C,
    0x96, 0x5E, 0xA2, 0x07, 0xBD, 0x60, 0x03, 0x9D, 0x90, 0x03, 0xCA, 0x10,
    0xF7, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0x78,
    0x53, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0xA0,
    0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0xAE, 0x50, 0xA9, 0x70,
    0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0xE6, 0x56, 0xA9, 0x70,
    0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0x90, 0xA0, 0x03, 0xA2,
    0x60, 0x20, 0x30, 0x52, 0x20, 0xB6, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2,
    0x60, 0x20, 0x30, 0x52, 0x4C, 0x96, 0x5E, 0xA2, 0x07, 0xBD, 0x60, 0x03,
    0x9D, 0x90, 0x03, 0xCA, 0x10, 0xF7, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x68,
    0x20, 0x30, 0x52, 0x20, 0xB6, 0x50, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60,
    0x20, 0x30, 0x52, 0xA9, 0x90, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52,
    0xA2, 0x07, 0xBD, 0x70, 0x03, 0x9D, 0x90, 0x03, 0xCA, 0x10, 0xF7, 0x20,
    0xAE, 0x50, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9,
    0x90, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0xA9,
    0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x96, 0x5E, 0xA9,
    0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0xA8, 0xA0, 0x6D,
    0xA2, 0x68, 0x20, 0x30, 0x52, 0x4C, 0x78, 0x53, 0xA9, 0x60, 0xA0, 0x03,
    0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20,
    0x30, 0x52, 0x20, 0x35, 0x55, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20,
    0x30, 0x52, 0x4C, 0x55, 0x64, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x68, 0x20,
    0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20,
    0x35, 0x55, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x4C,
    0xAE, 0x64, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0xA9,
    0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0xA9,
    0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x4C, 0x07, 0x65, 0x20,
    0x96, 0x5E, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9,
    0x30, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x4C, 0x35, 0x55, 0x20,
    0x96, 0x5E, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9,
    0x38, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x4C, 0x35, 0x55, 0xA9,
    0x68, 0x85, 0xF2, 0xA9, 0x03, 0x85, 0xF3, 0xA9, 0xA0, 0x85, 0xF4, 0xA9,
    0x03, 0x85, 0xF5, 0x20, 0x04, 0x69, 0x20, 0x96, 0x5E, 0xA9, 0x70, 0xA0,
    0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x03, 0xA2, 0x68,
    0x20, 0x30, 0x52, 0x20, 0x78, 0x53, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60,
    0x20, 0x30, 0x52, 0x4C, 0x35, 0x61, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x68,
    0x20, 0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x6D, 0xA2, 0x60, 0x20, 0x30, 0x52,
    0x20, 0x35, 0x55, 0x60, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x70, 0x20, 0x30,
    0x52, 0xAD, 0x70, 0x03, 0x29, 0x7F, 0x8D, 0x70, 0x03, 0x60, 0xA9, 0x60,
    0xA0, 0x03, 0xA2, 0x70, 0x20, 0x30, 0x52, 0xAD, 0x70, 0x03, 0x49, 0x80,
    0x8D, 0x70, 0x03, 0x60, 0xA0, 0x07, 0x18, 0xB9, 0x02, 0x03, 0x71, 0xF2,
    0x99, 0x02, 0x03, 0x88, 0x10, 0xF5, 0x60, 0x85, 0xC4, 0x29, 0x01, 0xF0,
    0x2C, 0xA9, 0x00, 0xA2, 0x07, 0xBC, 0x22, 0x03, 0x19, 0x54, 0x69, 0x9D,
    0x23, 0x03, 0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x8D, 0x22, 0x03, 0xA9,
    0x00, 0xA2, 0x07, 0xBC, 0x32, 0x03, 0x19, 0x54, 0x69, 0x9D, 0x33, 0x03,
    0xB9, 0xF4, 0x69, 0xCA, 0x10, 0xF1, 0x8D, 0x32, 0x03, 0xA5, 0xC4, 0x4A,
    0xF0, 0x23, 0xD8, 0x18, 0x69, 0x07, 0xF8, 0xA8, 0xA2, 0x07, 0xBD, 0x22,
    0x03, 0x99, 0x22, 0x03, 0xBD, 0x32, 0x03, 0x99, 0x32, 0x03, 0x88, 0xCA,
    0x10, 0xF0, 0xA9, 0x00, 0x99, 0x22, 0x03, 0x99, 0x32, 0x03, 0x88, 0x10,
    0xF7, 0x60, 0xA9, 0x0F, 0x2C, 0x60, 0x03, 0x70, 0x2E, 0xD0, 0x36, 0x20,
    0x21, 0x67, 0xAE, 0x61, 0x03, 0xE0, 0x12, 0xB0, 0x21, 0xD8, 0xA9, 0x0B,
    0x38, 0xFD, 0x94, 0x6A, 0xF8, 0x4A, 0xF0, 0x0C, 0xAA, 0xA0, 0x05, 0xA9,
    0x00, 0x99, 0x72, 0x03, 0x88, 0xCA, 0xD0, 0xF9, 0x90, 0x08, 0xA9, 0xF0,
    0x39, 0x72, 0x03, 0x99, 0x72, 0x03, 0x60, 0xA9, 0x28, 0xA0, 0x6D, 0xA2,
    0x70, 0x20, 0x30, 0x52, 0x60, 0xA9, 0x60, 0xA0, 0x03, 0xA2, 0x70, 0x20,
    0x30, 0x52, 0x60, 0xA2, 0x07, 0xBD, 0x60, 0x03, 0x9D, 0xA0, 0x03, 0xCA,
    0x10, 0xF7, 0x20, 0xE2, 0x66, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20,
    0x30, 0x52, 0xA9, 0xA0, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20,
    0xAE, 0x50, 0xAD, 0x72, 0x03, 0xD0, 0x03, 0x8D, 0x70, 0x03, 0x60, 0xA9,
    0x60, 0x85, 0xF2, 0xA9, 0x6D, 0x85, 0xF3, 0xA9, 0x80, 0x85, 0xF4, 0xA9,
    0x03, 0x85, 0xF5, 0x20, 0x04, 0x69, 0x20, 0x52, 0x68, 0xAD, 0x70, 0x03,
    0x10, 0x15, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9,
    0x60, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0xB6, 0x50, 0xA9,
    0x90, 0x85, 0xF2, 0xA9, 0x6D, 0x85, 0xF3, 0xA9, 0x70, 0x85, 0xF4, 0xA9,
    0x03, 0x85, 0xF5, 0x20, 0x80, 0x68, 0x10, 0x07, 0xA9, 0x04, 0x85, 0xC9,
    0x4C, 0xCF, 0x67, 0xA9, 0x58, 0x85, 0xF2, 0xA9, 0x6D, 0x85, 0xF3, 0x20,
    0x80, 0x68, 0x10, 0x07, 0xA9, 0x03, 0x85, 0xC9, 0x4C, 0xCF, 0x67, 0xA9,
    0x80, 0x85, 0xF2, 0xA9, 0x6D, 0x85, 0xF3, 0x20, 0x80, 0x68, 0x10, 0x07,
    0xA9, 0x02, 0x85, 0xC9, 0x4C, 0xCF, 0x67, 0xA9, 0x01, 0x85, 0xC9, 0xA5,
    0xC9, 0x8D, 0x00, 0x03, 0xC9, 0x03, 0x90, 0x15, 0xA9, 0x70, 0xA0, 0x03,
    0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0x58, 0xA0, 0x6D, 0xA2, 0x68, 0x20,
    0x30, 0x52, 0x20, 0xAE, 0x50, 0xA5, 0xC9, 0x29, 0x01, 0xD0, 0x04, 0xA9,
    0x80, 0x85, 0xC8, 0xA9, 0x80, 0x85, 0xF2, 0xA9, 0x6D, 0x85, 0xF3, 0x20,
    0x80, 0x68, 0x10, 0x15, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30,
    0x52, 0xA9, 0x58, 0xA0, 0x6D, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0xAE,
    0x50, 0xAD, 0x70, 0x03, 0x29, 0x7F, 0x8D, 0x70, 0x03, 0xA9, 0x70, 0x85,
    0xF4, 0xA9, 0x03, 0x85, 0xF5, 0xA9, 0x98, 0x85, 0xF2, 0xA9, 0x6D, 0x85,
    0xF3, 0x20, 0x80, 0x68, 0x10, 0x1B, 0xA9, 0x80, 0xA0, 0x6D, 0xA2, 0x60,
    0x20, 0x30, 0x52, 0xA9, 0x70, 0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52,
    0x20, 0xAE, 0x50, 0xA5, 0xCA, 0x49, 0x01, 0x85, 0xCA, 0x60, 0xA9, 0x80,
    0xA0, 0x03, 0xA2, 0x68, 0x20, 0x30, 0x52, 0x20, 0x35, 0x55, 0xA9, 0x70,
    0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0x20, 0x2B, 0x67, 0xA9, 0x70,
    0xA0, 0x03, 0xA2, 0x60, 0x20, 0x30, 0x52, 0xA9, 0x80, 0xA0, 0x03, 0xA2,
    0x68, 0x20, 0x30, 0x52, 0x20, 0x78, 0x53, 0x60, 0xF8, 0xA0, 0x00, 0xB1,
    0xF2, 0x51, 0xF4, 0x10, 0x05, 0xB1, 0xF2, 0x09, 0x01, 0x60, 0x0A, 0x10,
    0x20, 0xB1, 0xF2, 0x30, 0x16, 0xA0, 0x02, 0xB1, 0xF2, 0xD0, 0x03, 0xA9,
    0x80, 0x60, 0xB1, 0xF4, 0xD0, 0x01, 0x60, 0xA0, 0x00, 0xB1, 0xF2, 0x0A,
    0x09, 0x01, 0x60, 0xB1, 0xF4, 0x0A, 0x09, 0x01, 0x60, 0xB1, 0xF2, 0x51,
    0xF4, 0xD0, 0x23, 0xC8, 0xB1, 0xF2, 0x51, 0xF4, 0xD0, 0x1C, 0xA0, 0x07,
    0xA2, 0x05, 0xA9, 0x00, 0x85, 0xC0, 0x38, 0xB1, 0xF4, 0xF1, 0xF2, 0xF0,
    0x02, 0xE6, 0xC0, 0x88, 0xCA, 0x10, 0xF4, 0x90, 0x20, 0xA5, 0xC0, 0xD0,
    0x19, 0x60, 0xA0, 0x01, 0x38, 0xB1, 0xF4, 0xF1, 0xF2, 0x88, 0xB1, 0xF4,
    0xF1, 0xF2, 0xB0, 0x10, 0xB1, 0xF2, 0x29, 0xC0, 0xF0, 0x07, 0xC9, 0xC0,
    0xF0, 0x03, 0xA9, 0x81, 0x60, 0xA9, 0x01, 0x60, 0xB1, 0xF4, 0x29, 0xC0,
    0xF0, 0xF4, 0xC9, 0xC0, 0xF0, 0xF0, 0xD0, 0xF1, 0xA0, 0x07, 0xB1, 0xF2,
    0x91, 0xF4, 0x88, 0x10, 0xF9, 0x60, 0xA2, 0x5F, 0xA9, 0x00, 0x9D, 0x00,
    0x03, 0xCA, 0x10, 0xFA, 0x60, 0xA9, 0x28, 0xA0, 0x6D, 0xA2, 0x70, 0x20,
    0x30, 0x52, 0x60, 0xA9, 0xD0, 0xA0, 0x6D, 0xA2, 0x70, 0x20, 0x30, 0x52,
    0x4C, 0x53, 0x69, 0xA9, 0xC8, 0xA0, 0x6D, 0xA2, 0x70, 0x20, 0x30, 0x52,
    0x4C, 0x53, 0x69, 0xA9, 0xC0, 0xA0, 0x6D, 0xA2, 0x70, 0x20, 0x30, 0x52,
    0x4C, 0x53, 0x69, 0xA9, 0xD8, 0xA0, 0x6D, 0xA2, 0x70, 0x20, 0x30, 0x52,
    0x4C, 0x53, 0x69, 0x00, 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
    0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x30,
    0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
    0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x30,
    0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
    0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x30,
    0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
    0x80, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11,
    0x12, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
    0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x33, 0x34, 0x35,
    0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D,
    0x4E, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x51, 0x52, 0x53,
    0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31,
    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x40, 0x41, 0x42, 0x43,
    0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
    0x56, 0x57, 0x58, 0x59, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
    0x68, 0x69, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x90, 0x91,
    0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x15, 0x16, 0x17, 0x18,
    0x19, 0x00, 0x00, 0x00, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x25, 0x26, 0x27, 0x28, 0x29, 0x00, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x45, 0x46, 0x47, 0x49,
    0x49, 0x00, 0x00, 0x00, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x55, 0x56, 0x57, 0x58, 0x59, 0x00, 0x00, 0x00, 0x60, 0x61, 0x62, 0x63,
    0x64, 0x65, 0x66, 0x67, 0x65, 0x66, 0x67, 0x68, 0x69, 0x00, 0x00, 0x00,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x75, 0x76, 0x77, 0x78,
    0x79, 0x00, 0x00, 0x00, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x55, 0x56, 0x57, 0x58, 0x59, 0x00, 0x00, 0x00, 0x60, 0x61, 0x62, 0x63,
    0x64, 0x65, 0x66, 0x67, 0x65, 0x66, 0x67, 0x68, 0x69, 0x00, 0x00, 0x00,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x75, 0x76, 0x77, 0x78,
    0x79, 0x00, 0x00, 0x00, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
    0x85, 0x86, 0x87, 0x88, 0x89, 0x00, 0x00, 0x00, 0x90, 0x91, 0x92, 0x93,
    0x94, 0x95, 0x96, 0x97, 0x95, 0x96, 0x97, 0x98, 0x99, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x18, 0x19, 0x1A,
    0x1B, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x21, 0x22, 0x23,
    0x24, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x48, 0x49, 0x4A,
    0x4B, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x82, 0x83,
    0x84, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA8, 0xA9, 0xAA,
    0xAB, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xB1, 0xB2, 0xB3,
    0xB4, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33,
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x69, 0x31,
    0x47, 0x18, 0x05, 0x60, 0x00, 0x00, 0x23, 0x02, 0x58, 0x50, 0x92, 0x99,
    0x40, 0x01, 0x43, 0x42, 0x94, 0x48, 0x19, 0x03, 0x00, 0x00, 0x27, 0x18,
    0x28, 0x18, 0x28, 0x46, 0x00, 0x00, 0x14, 0x14, 0x21, 0x35, 0x62, 0x37,
    0x00, 0x00, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x00, 0x00, 0x62, 0x83,
    0x18, 0x53, 0x07, 0x18, 0x40, 0x01, 0x70, 0x71, 0x06, 0x78, 0x11, 0x87,
    0x40, 0x01, 0x31, 0x83, 0x09, 0x88, 0x61, 0x84, 0x40, 0x01, 0x15, 0x91,
    0x54, 0x94, 0x30, 0x92, 0x00, 0x00, 0x15, 0x70, 0x79, 0x63, 0x26, 0x79,
    0x80, 0x00, 0x15, 0x70, 0x79, 0x63, 0x26, 0x79, 0x00, 0x00, 0x47, 0x12,
    0x38, 0x89, 0x80, 0x38, 0x40, 0x01, 0x78, 0x53, 0x98, 0x16, 0x33, 0x98,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x50, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x70, 0x79, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x99, 0x99, 0x99,
    0x99, 0x99, 0x99, 0x99, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x23, 0x15, 0x39, 0x31, 0x67, 0x00,
    0xC0, 0x03, 0x13, 0x85, 0x37, 0x04, 0x26, 0x40, 0x40, 0x02, 0x41, 0x66,
    0x35, 0x84, 0x67, 0x69, 0xC0, 0x01, 0x49, 0x99, 0x99, 0x05, 0x34, 0x55,
    0x40, 0x01, 0x99, 0x99, 0x99, 0x95, 0x34, 0x64, 0x40, 0x01, 0x78, 0x53,
    0x98, 0x16, 0x33, 0x97, 0x40, 0x02, 0x99, 0x66, 0x86, 0x52, 0x49, 0x12,
    0x40, 0x03, 0x99, 0x99, 0x66, 0x66, 0x86, 0x67, 0x40, 0x04, 0x99, 0x99,
    0x99, 0x66, 0x66, 0x67, 0x40, 0x05, 0x99, 0x99, 0x99, 0x99, 0x66, 0x67,
    0x40, 0x06, 0x99, 0x99, 0x99, 0x99, 0x99, 0x67, 0x40, 0x06, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x07, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x85, 0x39, 0x81, 0x63, 0x39, 0x74, 0x48, 0x00, 0x99, 0x66, 0x86,
    0x52, 0x49, 0x11, 0x62, 0x00, 0x09, 0x99, 0x96, 0x66, 0x68, 0x66, 0x65,
    0x00, 0x00, 0x99, 0x99, 0x99, 0x66, 0x66, 0x67, 0x00, 0x00, 0x09, 0x99,
    0x99, 0x99, 0x96, 0x67, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x40, 0x01, 0x69, 0x31, 0x47, 0x18, 0x05, 0x60, 0x40, 0x02, 0x95, 0x31,
    0x01, 0x79, 0x80, 0x43, 0x40, 0x03, 0x99, 0x50, 0x33, 0x08, 0x53, 0x17,
    0x40, 0x04, 0x99, 0x95, 0x00, 0x33, 0x30, 0x84, 0x40, 0x05, 0x99, 0x99,
    0x50, 0x00, 0x33, 0x33, 0x40, 0x06, 0x99, 0x99, 0x95, 0x00, 0x00, 0x33,
    0x40, 0x07, 0x99, 0x99, 0x99, 0x50, 0x00, 0x00, 0x40, 0x08, 0x99, 0x99,
    0x99, 0x95, 0x00, 0x00, 0x40, 0x09, 0x99, 0x99, 0x99, 0x99, 0x50, 0x00,
    0x40, 0x10, 0x99, 0x99, 0x99, 0x99, 0x95, 0x00, 0x40, 0x11, 0x99, 0x99,
    0x99, 0x99, 0x99, 0x50, 0x06, 0x93, 0x14, 0x71, 0x80, 0x55, 0x99, 0x45,
    0x00, 0x95, 0x31, 0x01, 0x79, 0x80, 0x43, 0x25, 0x00, 0x09, 0x95, 0x03,
    0x30, 0x85, 0x31, 0x68, 0x00, 0x00, 0x99, 0x95, 0x00, 0x33, 0x30, 0x84,
    0x00, 0x00, 0x09, 0x99, 0x95, 0x00, 0x03, 0x33, 0x00, 0x00, 0x00, 0x99,
    0x99, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x99, 0x99, 0x95, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x99, 0x99, 0x99, 0x95, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xC0, 0x01, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x33, 0x33,
    0x33, 0x33, 0x33, 0x33, 0xC0, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x12, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x33, 0x00,
//  0x00, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00
    0x00, 0x00, 0x00, 0x00, 0xC0, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x50, 0x00
};

void processCalcKey(uint8_t curkey)
{
    switch (curkey) {
    case 'C':
        enterflt((uint8_t)0);
        if (!((curkey>='C') && (curkey<='F'))) {
            break;    // if statement allows roll-through to next reg entry
        }
    case 'D':
        enterflt((uint8_t)1);
        if (!((curkey>='C') && (curkey<='F'))) {
            break;
        }
    case 'F':
        enteroperation();
        break;
    case 'E':
        enterflt((uint8_t)2);
        break;

    case   1:
        showflt(0);
        break; // AD
    case   4:
        showflt(1);
        break; // DA
    case  16:
        showflt(2);
        break; // PC
    }   // switch(cukey)

}  // processCalcKey()



extern "C" {  // the extern C is to make function accessible from within CPU.c
    uint8_t enterflt(uint8_t reg)       // result code -1 = cancel, 0 = good
    {
        uint8_t fltstr[32];                 // display string
        uint8_t decpt = 0xFF, expt = 0xFF;  // pointers to start of mantissa & exponent in string
        uint8_t mntsign = 0, expsign = 0;   // 1 means negative for mantissa/exponent
        uint8_t strpos = 0, i, j;               // strpos is position counter in string
        //uint8_t mntval = 0, expval = 0;     // parsed value of mantissa & exponent
        uint8_t carry = 0, addToExp;
        int digit;
        uint16_t offset;
        uint8_t done=0;

        // init
        offset = WREG_OFFSET + 8*reg;
        for (i=0; i<8; i++)
            #if _TARGET == PERSONAL_COMPUTER
                fltstr[i]='_';
            #else
                fltstr[i]=65;
            #endif

        // input loop ---------------------------------------------------------------
        do {
            #if _TARGET == PERSONAL_COMPUTER
                if (_kbhit()) {//}
                    curkey = _getch();
            #else
                curkey=0;
                driveCalcLEDs(fltstr, decpt);  // xxxxxx decpt may be a problem
                scanKeys();
                if (curkey!=0) {
            #endif

                if (curkey=='+') {
                    if (expt==0xFF) {           // not yet into exponent
                        mntsign = 1;
                        strpos=0;
                        #if _TARGET == PERSONAL_COMPUTER
                            fltstr[strpos++] = '-';
                        #else
                            fltstr[strpos++] = 64;
                        #endif
                    } else {                        // minus sign relates to exponent
                        expsign = 1;
                        strpos=expt;
                        #if _TARGET == PERSONAL_COMPUTER
                            fltstr[strpos++] = '-';
                        #else
                            fltstr[strpos++] = 64;
                        #endif
                    }
                }
                if ((curkey>='0') && (curkey<='9')) {
                    // temp protection against entering 0.025, which breaks this code.
                    // temp fix: do not allow entering a 0 after 0.
                    if ((curkey=='0') && (decpt==(strpos-1)) && (fltstr[strpos-1]=='0')) {
                        // do nothing, that's the temp fix
                    } else
                        // end of temp bug fix
                    {
                        fltstr[strpos++] = curkey;
                    }
                }
                if (curkey=='B') {
                    expt = strpos;
                    #if _TARGET == PERSONAL_COMPUTER
                        fltstr[strpos++] = 'E';
                    #else
                        fltstr[strpos++] = 62;
                    #endif
                }
                if (curkey=='A') {
                    decpt = strpos-1;
                }

                #if _TARGET == PERSONAL_COMPUTER
                    fltstr[strpos] = 65;
                #else
                    fltstr[strpos]=0x00;        // terminate into nice string
                #endif
            }
        }
        while ((strpos<8) && (curkey!=7) && (curkey!=19) && (1!=(curkey>='C') && (curkey<='F')));

        if (curkey==19) {
            return(-1);    // cancel
        }

        // parse into 8 byte fltpt65 format -----------------------------------------------------------------
        // Ugly, horrible code. But running out of Arduino memory means C library calls must be avoided.

        if (expt==0xFF) {   // if no E was entered, let it start at end of string and be 0 length
            expt = strpos;
        }
        if (decpt==0xFF) {  // if no dec pt was entered, put it at end of mantissa, just before the E
            decpt = expt-1;
        }
        addToExp = decpt - mntsign; // normalise mantissa: how much to add to exp to have 1.2345 format

        // Exponent 3: parse and adjust exponent value to get normalised 1.23 format using addToExp
        if ((strpos-1)>expt) {  // user at least entered 1 exp digit
            digit = (expsign==1?-1:1) * ((int) fltstr[strpos-1]-48) + (int) addToExp;    //expsign*-1: deal with negative exps
        } else {
            digit = (int) addToExp;    // user entered number without exp. So exp is 0.
        }
        if (digit<0) {
            digit = -(digit);    // do not want to use abs() function-arduino out of memory space :)
        }
        RAM[offset+1] = (digit<=9?digit:digit-10);  // store adjusted exp digit
        addToExp = (digit<=9?0:1);                  // simple carry mechanism: add could overflow to 2nd sigit

        // Exponent 2: same thing.
        if ((strpos-2)>expt) {  // user entered a second exp digit
            digit = (expsign==1?-1:1) * ((int) fltstr[strpos-2]-48) + (int) addToExp;    //expsign*-1: deal with negative exps
        } else {
            digit = (int) addToExp;    // user entered number without exp. So exp is 0.
        }
        if (digit<0) {
            digit = -(digit);    // do not want to use abs() function-arduino out of memory space :)
        }
        RAM[offset+1] |= (digit<=9?digit:digit-10)<<4;  // store adjusted exp digit in upper nibble
        addToExp = (digit<=9?0:1);                  // simple carry mechanism: add could overflow to 2nd sigit

        // Exponent 1: same thing.
        if ((strpos-3)>expt) {  // user entered a second exp digit
            digit = ((int) fltstr[strpos-3]-48) + (int) addToExp;    // there is no carry or add to exp in digit 3
        } else {
            digit = (int) addToExp;    // user entered number without exp. So exp is 0.
        }
        if (digit<0) {
            digit = -(digit);    // do not want to use abs() function-arduino out of memory space :)
        }
        RAM[offset+0] = (digit<=9?digit:digit-10);  // store adjusted exp digit in lower nibble

        // Sign bits
        RAM[offset+0] |= ((mntsign<<7) | (expsign<<6));
    //  printf("%u %u ", (RAM[offset+0] & 0xF0)>>4, RAM[offset+0] & 0x0F);
    //  printf("%u %u \n", (RAM[offset+1] & 0xF0)>>4, RAM[offset+1] & 0x0F);

        // print mantissa
        j = mntsign;
        for (i=0; i<12; i++) {
            if (j<expt) {
                RAM[offset+2+i] = (fltstr[j]-48)<<4;
            } else {
                RAM[offset+2+i] = 0;
            }
            j++;

            if (j<expt) {
                RAM[offset+2+i] |= (fltstr[j]-48);
            }
            j++;

         // printf("%u %u ", (RAM[offset+2+i] & 0xF0)>>4, RAM[offset+2+i] & 0x0F);
        }
     // printf("\n");
        return (curkey);  // return value, if not -1, can be used to jump to next register value entry call
    } // end function
} // end C segment

extern "C" {  // the extern C is to make function accessible from within CPU.c
    uint8_t showflt(uint8_t reg)    // returns location of decimal point in string
    {
        uint8_t fltstr[32];                 // display string
        uint8_t mntsign = 0, expsign = 0;   // 1 means negative for mantissa/exponent
        uint8_t cnt, expt, i;   // decpt,
        uint16_t offset;
        int exp, decpt;

        // init
        offset = WREG_OFFSET + 8*reg;
        for (i=0; i<8; i++) {
            fltstr[i]='_';    // no longer necessary I think
        }
        // calculate exponent
        exp = (RAM[offset+1] & 0x0F) + 10*((RAM[offset+1] & 0xF0)>>4) + 100*(RAM[offset+0] & 0x0F);
     // printf("\n\nexp = %d\n", exp);

        // determine maximum exponent value we can show as normal number without E
        mntsign = (RAM[offset+0] & 0x80)>>7;    // negative mantissa: 1
        expsign = (RAM[offset+0] & 0x40)>>6;    // negative exponent: 1
        decpt = (mntsign==0?0:1);                   // dec point is after digit0 (+ values) or digit1 (- values)

        // with pos numbers, any E between 0 and 7 can be polished away. If there's a '-', one less
        if ((exp>0) && (exp<(7 - mntsign)) && (expsign==0)) {
            // yes, we can polish E away
            decpt +=exp;
            expt = 0;
        }
//      else // negative exponent
//      {   decpt -=exp;
//          // need to ROR the string's digits or decpt gets to be negative!
//
//          expt = 0;
//      }
//  }
//  else                        // we need to show exponent, how many digits?
        {
            expt = 0;
            if (exp>0) {
                expt = 2; //1;
                fltstr[6] = (RAM[offset+1] & 0x0F) + 48;
            }
            if (exp>9) {
                expt = 3; //2;
                fltstr[5] = (uint8_t) ((RAM[offset+1] & 0xF0)>>4) + (uint8_t) 48;
            }
            if (exp>90) {
                expt = 4; //3;
                fltstr[4] = (RAM[offset+0] & 0x0F) + 48;
            }
            #if _TARGET == PERSONAL_COMPUTER
                fltstr[7-expt] = (expsign==1?64:62);
            #else
                fltstr[7-expt] = (expsign==1?'-':'E');
            #endif
        }

        // fill string with mantissa
        cnt=0;
        if (mntsign==1)
            #if _TARGET == PERSONAL_COMPUTER
                fltstr[0] = 64;
            #else
                fltstr[0]='-';
            #endif

        for (i=mntsign; i<(7-expt); i=i+2) {
            fltstr[i] = (uint8_t) ((RAM[offset + 2 + cnt ] & 0xF0)>>4) + (uint8_t) 48;
//          printf(" %c ", (uint8_t) ((RAM[offset + 2 + cnt ] & 0xF0)>>4) + (uint8_t) 48);
            if ((i+1)<(7-expt)) { // bug fix 20141007
                fltstr[i+1] = (RAM[offset + 2 + cnt ] & 0x0F) + 48;
//              printf(" %c   ", (RAM[offset + 2 + cnt ] & 0x0F) + 48);
            }
            cnt++;
        }
        fltstr[7]=0x00; // string terminator

//      printf("\n\n%s\n", fltstr);

        #if _TARGET == PERSONAL_COMPUTER
            // show number with dec point inserted
            for (i=0; i<=decpt; i++) {
                printf("%c", fltstr[i]);
            }
            printf(".");
            for (i=decpt+1; i<7; i++) {
                printf("%c", fltstr[i]);
            }
            printf("\n");
        #else
            curkey=0;
            do {
                driveCalcLEDs(fltstr, decpt);
                scanKeys();
            } while (curkey==0);
            if ((curkey<'C') || (curkey>'F')) {
                curkey=0;    // to clear any keypresses before returning to KIM
            }
        #endif

        return decpt;                       // pointers to start of mantissa & exponent in string
    } // end function
} // end C segment


extern "C" {  // the extern C is to make function accessible from within CPU.c
    uint8_t enteroperation(void)        // result code -1 = cancel, 0 = good
    {
        uint8_t fltstr[8];                  // display string
        uint8_t strpos = 4, i;              // strpos is position counter in string

        // init
        #if _TARGET == PERSONAL_COMPUTER
            for (i=0; i<8; i++) {
                fltstr[i]=' ';
            }
            fltstr[4]='_';
            fltstr[5]='_';
        #else
            for (i=0; i<8; i++) {
                fltstr[i]=66;
            }
            fltstr[4]=65;
            fltstr[5]=65;
        #endif

        // input loop ---------------------------------------------------------------
        do {
            #if _TARGET == PERSONAL_COMPUTER
                if (_kbhit()) { // } this curly brace is there so Arduino IDE does not miscount when it does { } highlighting
                    curkey = _getch();
            #else
                curkey=0;
                driveCalcLEDs(fltstr, 5);
                scanKeys();
                if (curkey!=0) {
            #endif

                if ((curkey>=48) && (curkey<=57)) {   //only allow dec digits
                    fltstr[strpos++] = curkey;
                }

                #if _TARGET == PERSONAL_COMPUTER
                    fltstr[strpos]=0x00;        // terminate into nice string
//                  printf("> %s  ms%u es%u expt%u decpt%u\r", fltstr, mntsign, expsign, expt, decpt);
                #else
                    fltstr[strpos] = 65;
                #endif
            }
        }
        while ((strpos<6) && (curkey!=7) && (curkey!=19));

        if (curkey==19) {
            return(-1);    // cancel
        }

        RAM[0x00F3]= (fltstr[4]-48)*10 + (fltstr[5]-48);  // operation to go into 6502 A register
        RAM[0x00EF] = (uint8_t) 0xE0;
        RAM[0x00F0] = (uint8_t) 0x6F;                // set PC register to fltpt65 start address (0x6FE0, not 0x5000, we need to start with a JSR and end with a BRK)
        curkey = 16;  // PC

        return(RAM[0x00F3]);
    }
} // end C segment

void driveCalcLEDs(uint8_t *numberStr, uint8_t decpt)
{
    uint8_t led, col, ledNo, currentBit, bitOn;
    uint8_t digit,i;

    // 1. initialse for driving the 6 segment LEDs
    for (led=0; led<7; led++) {
        pinMode(ledSelect7[led], OUTPUT);  // set led pins to output
        digitalWrite(ledSelect7[led], LOW); // LOW = not lit
    }
    // 2. switch column pins to output mode
    for (digit=0; digit<7; digit++) {
        for (col=0; col<segmLEDs; col++) {
            pinMode(aCols[col], OUTPUT);           // set pin to output
            currentBit = (1<<(7-col));             // isolate the current bit in loop
            bitOn = (currentBit&dig[numberStr[digit]-48])==0;
            if (col==0 && digit==decpt) { // show decimal point here?
                bitOn=0;    // 0 being light led.
            }
            digitalWrite(aCols[col], bitOn);       // set the bit
        }
        digitalWrite(ledSelect7[digit], HIGH); // Light this LED
        delay(2);
        digitalWrite(ledSelect7[digit], LOW); // unLight this LED
    }
} // end of function
//} // end of C segment

#endif

